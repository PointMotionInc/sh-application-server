name: Push to EC2

# Controls when the workflow will run
on:
  pull_request:
    types:
      - closed
    branches:
      - 'main'
  push:
    branches: [ dev, stage ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Debug GH branch names
        run: |
          echo "GITHUB_HEAD_REF: $GITHUB_HEAD_REF"
          echo "GITHUB_HEAD_REF##*/: ${GITHUB_HEAD_REF##*/}"
          echo "GITHUB_REF: $GITHUB_REF"

      - name: Set production environment variables
        if: ${{ github.base_ref == 'main' }} && github.event.pull_request.merged == true
        run: |
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
          echo "SSH_REMOTE_PATH=/home/ubuntu/nestjs-app" >> $GITHUB_ENV
          echo "SSH_HOST=services.prod.pointmotioncontrol.com" >> $GITHUB_ENV
          echo "SSH_USER=ubuntu" >> $GITHUB_ENV
          echo ${{ secrets.PROD_SSH_PRIVATE_KEY_B64ENCODED }} | base64 -d > ~/ssh_key
          echo "{\"version\":\"${GITHUB_HEAD_REF##*/}\",\"timestamp\":\"$(date +"%Y-%m-%dT%H:%M:%S%z")\"}" > version.json

      - name: Set development environment variables
        if: endsWith(github.ref, '/dev')
        run: |
          echo "ENVIRONMENT=development" >> $GITHUB_ENV
          echo "SSH_REMOTE_PATH=/home/ubuntu/nestjs-app" >> $GITHUB_ENV
          echo "SSH_HOST=services.dev.pointmotioncontrol.com" >> $GITHUB_ENV
          echo "SSH_USER=ubuntu" >> $GITHUB_ENV
          echo ${{ secrets.DEV_SSH_PRIVATE_KEY_B64ENCODED }} | base64 -d > ~/ssh_key
          echo "{\"version\":\"dev-build\",\"timestamp\":\"$(date +"%Y-%m-%dT%H:%M:%S%z")\"}" > version.json

      - name: Set staging environment variables
        if: endsWith(github.ref, '/stage')
        run: |
          echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          echo "SSH_REMOTE_PATH=/home/ec2-user/nestjs-app" >> $GITHUB_ENV
          echo "SSH_HOST=services.stage.pointmotioncontrol.com" >> $GITHUB_ENV
          echo "SSH_USER=ec2-user" >> $GITHUB_ENV
          echo ${{ secrets.STAGE_SSH_PRIVATE_KEY_B64ENCODED }} | base64 -d > ~/ssh_key
          echo "{\"version\":\"stage-build\",\"timestamp\":\"$(date +"%Y-%m-%dT%H:%M:%S%z")\"}" > version.json

      - name: Setup SSH Files permissions
        run: |
          echo "Setting proper SSH private key permissions..."
          chmod 600 ~/ssh_key
          ls -la ~

          echo "Creating .ssh dir..."
          mkdir -p ~/.ssh

          echo "Setting proper .ssh dir permissions..."
          chmod 700 ~/.ssh
          ls -la ~

          echo "Creating known_hosts file..."
          touch ~/.ssh/known_hosts
          chmod 777 ~/.ssh/known_hosts
          ls -la ~/.ssh/

          echo "Marking EC2 server as a known host..."
          ssh-keyscan -t rsa $SSH_HOST >> ~/.ssh/known_hosts

      - name: Setup SSH Config file
        run: |
          touch ~/.ssh/config
          echo "Host $SSH_HOST" >> ~/.ssh/config
          echo "HostName $SSH_HOST" >> ~/.ssh/config
          echo "User $SSH_USER" >> ~/.ssh/config
          echo "IdentityFile ~/ssh_key" >> ~/.ssh/config
          echo "IdentitiesOnly yes" >> ~/.ssh/config

      # Uncomment this if you want to debug Github action using SSH.
      # - name: Setup upterm session
      #   uses: lhotari/action-upterm@v1

      - name: Build Deployable App
        run: |
         npm ci --ignore-scripts
         npm run build
         cp version.json ./dist

         echo "Listing files..."
         ls -la

         echo "Listing dist..."
         ls -la dist

      - name: Printing app version
        run: |
          cat dist/version.json | jq

      - name: Run test cases
        run: |
         npm run test:cov

      - name: Copy Files Over Remote Server
        run: |
          rsync -avzr --delete \
          /home/runner/work/sh-application-server/sh-application-server/dist/ \
          /home/runner/work/sh-application-server/sh-application-server/node_modules \
          /home/runner/work/sh-application-server/sh-application-server/storage \
          $SSH_USER@$SSH_HOST:$SSH_REMOTE_PATH

      - name: Kill existing node processes and run the app
        run: |
          ssh $SSH_USER@$SSH_HOST \
          "pkill -15 node; \
          (. ~/.pmc-secrets; \
          cd $SSH_REMOTE_PATH; \
          nohup node main.js > /dev/null 2>&1 &)"

  update-coverage-badge:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/dev'
    steps:
      - uses: actions/checkout@v2

      - name: Build app
        run: |
         npm ci --ignore-scripts
         npm run build

      - name: Run test cases
        run: |
         npm run test:cov

      - name: Update code coverage badge
        run: npx update-badge

      - uses: mikeal/publish-to-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_NAME: ${{ github.ref_name }}
